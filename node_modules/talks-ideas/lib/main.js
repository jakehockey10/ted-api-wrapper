var request = require('request');

var apiBase = 'http://api.ted.com/v1';
var formatXml = '.xml';
var formatJson = '.json';

var createMethod = function(method, apiKey, format) {
  return function(uri, data, cb) {
    if (typeof data === 'function') {
      cb = data;
      data = {};
    }
   
    var url = apiBase + uri + ((format.toLowerCase() === 'json')? formatJson: formatXml);
    url = url + ((uri === '/search')?(formatDataStringForSearch(apiKey, data)): (formatDataString(apiKey, data)));

    var options = {
      method: method,
      uri: url,
      headers: { 'Accept': ( format.toLowerCase() === formatJson ? 'application/json': 'application/xml') }
    };

    request(options, globalResponseHandler(cb, format));
  };
};

var formatDataStringForSearch = function (key, data) {
    if (!key) return;
    var str = '?api-key=' + key;
    if (!data) return str;
    for (var d in data) {
        str += '&' + d + '=' + data[d];
    }
    return str;
};

var formatDataString = function(key, data) {
  if (!key) return;
  
  var str = '?api-key=' + key;

  if (!data || data.length == 0) return str;

  var i;
  for (i = 0; i < data.length; i++) {
    str += '&';
    for (var key in data[i]) {
      if (key === 'id') {
        continue;
      }
      if (key === 'paramValue') {
        str += '=';
      } else if (key === 'criterion') {
        str += ':';
      }
      str += data[i][key];
    }
  }
  return str;
};

var globalResponseHandler = function(cb, format) {
  return function(err, res, body) {
    if (typeof cb !== 'function') return;

    if (err || !res) {
      var returnErr = 'Error connecting to API endpoint';
      if (err) returnErr += ': ' + err.code;
      err = returnErr;
    } else if (res.statusCode !== 200) {
      err = 'Something went wrong. API endpoint responded with a ' + res.statusCode;
    }
    if (err) return cb(err, null);

    if (body !== Object(body)) {
      try {
        if (format.toLowerCase() === 'json') {
          body = JSON.parse(body);
        } 
      } catch(e) {
        return cb('Could not parse response from API endpoint: ' + body, null);
      }
    }

    if (body.opstat === 'error') {
      if (body.err) return cb(body.err);
      return cb(err);
    }

    if (body.opstat === 'ok') body = body.response;

    cb(null, body);
  };
};

module.exports = function(apiKey, format) {
  var sendGet = createMethod('GET', apiKey, format);

  var getId = function(id) {
    return id === Object(id) ? id.id : id;
  };

  return {
    countries: {
      list: function(data, cb) { 
          sendGet('/countries', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/countries/' + getId(data), data, cb); 
      }
    },
    events: {
      list: function(data, cb) { 
          sendGet('/events', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/events/' + getId(data), data, cb); 
      }
    },
    languages: {
      list: function(data, cb) { 
          sendGet('/languages', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/languages/' + getId(data), data, cb); 
      }
    },
    quotes: {
      list: function(data, cb) { 
          sendGet('/quotes', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/quotes/' + getId(data), data, cb); 
      }
    },
    ratings: {
      list: function(data, cb) { 
          sendGet('/ratings', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/ratings/' + getId(data), data, cb); 
      }
    },
    ratingWords: {
      list: function(data, cb) { 
          sendGet('/rating_words', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/rating_words/' + getId(data), data, cb); 
      }
    },
    speakers: {
      list: function(data, cb) { 
          sendGet('/speakers', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/speakers/' + getId(data), data, cb); 
      }
    },
    states: {
      list: function(data, cb) { 
          sendGet('/states', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/states/' + getId(data), data, cb); 
      }
    },
    tedxEvents: {
      list: function(data, cb) { 
          sendGet('/tedx_events', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/tedx_events/' + getId(data), data, cb); 
      }
    },
    tedxGroups: {
      list: function(data, cb) { 
          sendGet('/tedx_groups', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/tedx_groups/' + getId(data), data, cb); 
      }
    },
    tedxSpeakers: {
      list: function(data, cb) { 
          sendGet('/tedx_speakers', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/tedx_speakers/' + getId(data), data, cb); 
      }
    },
    tedxVenues: {
      list: function(data, cb) { 
          sendGet('/tedx_venues', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/tedx_venues/' + getId(data), data, cb); 
      }
    },
    talks: {
      list: function(data, cb) { 
          sendGet('/talks', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/talks/' + getId(data), data, cb); 
      },
      subtitledDownloads: function(data, cb) { 
          sendGet('/talks/' + getId(data) + '/subtitled_downloads', data, cb); 
      }
    },
    themes: {
      list: function(data, cb) { 
          sendGet('/themes', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/themes/' + getId(data), data, cb); 
      },
      talkList: function(data, cb) { 
          sendGet('/themes/' + getId(data) + '/talks', data, cb); 
      }
    },
    playlists: {
      list: function(data, cb) { 
          sendGet('/playlists', data, cb); 
      },
      query: function(data, cb) { 
          sendGet('/playlists/' + getId(data), data, cb); 
      },
      talkList: function(data, cb) { 
          sendGet('/playlists/' + getId(data) + '/talks', data, cb); 
      }
    },
    search: {
      search: function(data, cb) {
        sendGet('/search', data, cb);
      }
    }
  };
};
